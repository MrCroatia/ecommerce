// src/utils/notifications.js\n\nexport function showToast(message, type = 'success', duration = 3000) {\n  // Create toast container if it doesn't exist\n  let toastContainer = document.querySelector('.toast-container');\n  \n  if (!toastContainer) {\n    toastContainer = document.createElement('div');\n    toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';\n    document.body.appendChild(toastContainer);\n  }\n  \n  // Create toast element\n  const toastEl = document.createElement('div');\n  toastEl.className = `toast align-items-center text-white bg-${type} border-0`;\n  toastEl.setAttribute('role', 'alert');\n  toastEl.setAttribute('aria-live', 'assertive');\n  toastEl.setAttribute('aria-atomic', 'true');\n  \n  // Create toast content\n  const toastContent = document.createElement('div');\n  toastContent.className = 'd-flex';\n  \n  const toastBody = document.createElement('div');\n  toastBody.className = 'toast-body';\n  toastBody.textContent = message;\n  \n  const closeButton = document.createElement('button');\n  closeButton.type = 'button';\n  closeButton.className = 'btn-close btn-close-white me-2 m-auto';\n  closeButton.setAttribute('data-bs-dismiss', 'toast');\n  closeButton.setAttribute('aria-label', 'Close');\n  \n  // Assemble toast\n  toastContent.appendChild(toastBody);\n  toastContent.appendChild(closeButton);\n  toastEl.appendChild(toastContent);\n  toastContainer.appendChild(toastEl);\n  \n  // Initialize and show toast\n  const toast = new bootstrap.Toast(toastEl, { delay: duration });\n  toast.show();\n  \n  // Remove toast after it's hidden\n  toastEl.addEventListener('hidden.bs.toast', () => {\n    toastEl.remove();\n  });\n}